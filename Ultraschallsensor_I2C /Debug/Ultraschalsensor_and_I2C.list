
Ultraschalsensor_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004770  08004770  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004770  08004770  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004770  08004770  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004784  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004784  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f484  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002060  00000000  00000000  0002f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00032470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002090e  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011522  00000000  00000000  00053bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c78af  00000000  00000000  000650f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c9a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004060  00000000  00000000  0012c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004718 	.word	0x08004718

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004718 	.word	0x08004718

080001cc <processMasterRequest>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processMasterRequest(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	// chance datatype from uint32_t into uint8_t
	// the uint32_t var can now send Byte by Byte
	I2C_Buffer[0] = (distance_mm >> 24) & 0xFF;
 80001d0:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <processMasterRequest+0x44>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	0e1b      	lsrs	r3, r3, #24
 80001d6:	b2da      	uxtb	r2, r3
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <processMasterRequest+0x48>)
 80001da:	701a      	strb	r2, [r3, #0]
	I2C_Buffer[1] = (distance_mm >> 16) & 0xFF;
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <processMasterRequest+0x44>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	0c1b      	lsrs	r3, r3, #16
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <processMasterRequest+0x48>)
 80001e6:	705a      	strb	r2, [r3, #1]
	I2C_Buffer[2] = (distance_mm >> 8) & 0xFF;
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <processMasterRequest+0x44>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	0a1b      	lsrs	r3, r3, #8
 80001ee:	b2da      	uxtb	r2, r3
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <processMasterRequest+0x48>)
 80001f2:	709a      	strb	r2, [r3, #2]
	I2C_Buffer[3] = distance_mm & 0xFF;
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <processMasterRequest+0x44>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <processMasterRequest+0x48>)
 80001fc:	70da      	strb	r2, [r3, #3]
	// sended Daten
	HAL_I2C_Slave_Transmit(&hi2c1, I2C_Buffer, 4, HAL_MAX_DELAY);
 80001fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000202:	2204      	movs	r2, #4
 8000204:	4903      	ldr	r1, [pc, #12]	; (8000214 <processMasterRequest+0x48>)
 8000206:	4804      	ldr	r0, [pc, #16]	; (8000218 <processMasterRequest+0x4c>)
 8000208:	f001 f891 	bl	800132e <HAL_I2C_Slave_Transmit>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	20000110 	.word	0x20000110
 8000214:	20000114 	.word	0x20000114
 8000218:	20000028 	.word	0x20000028

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb9d 	bl	800095e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f82e 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f9c8 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 800022c:	f000 f9a8 	bl	8000580 <MX_DMA_Init>
  MX_TIM1_Init();
 8000230:	f000 f8ac 	bl	800038c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000234:	f000 f86c 	bl	8000310 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Duty cycle von 10 Prozent
  TIM1->CCR4 = 8000;
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <main+0x58>)
 800023a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800023e:	641a      	str	r2, [r3, #64]	; 0x40

  // startet timer auf chanel 4
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000240:	210c      	movs	r1, #12
 8000242:	480d      	ldr	r0, [pc, #52]	; (8000278 <main+0x5c>)
 8000244:	f002 fe12 	bl	8002e6c <HAL_TIM_PWM_Start>

  // startet timer auf chanel 1 und 2
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000248:	2100      	movs	r1, #0
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <main+0x5c>)
 800024c:	f002 ff4e 	bl	80030ec <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000250:	2104      	movs	r1, #4
 8000252:	4809      	ldr	r0, [pc, #36]	; (8000278 <main+0x5c>)
 8000254:	f003 f82a 	bl	80032ac <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // checks if this Board is collectet

	  if (HAL_I2C_Slave_Transmit(&hi2c1, I2C_Buffer, sizeof(I2C_Buffer), HAL_MAX_DELAY) == HAL_OK)
 8000258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800025c:	2204      	movs	r2, #4
 800025e:	4907      	ldr	r1, [pc, #28]	; (800027c <main+0x60>)
 8000260:	4807      	ldr	r0, [pc, #28]	; (8000280 <main+0x64>)
 8000262:	f001 f864 	bl	800132e <HAL_I2C_Slave_Transmit>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f5      	bne.n	8000258 <main+0x3c>
	  {
		  processMasterRequest();
 800026c:	f7ff ffae 	bl	80001cc <processMasterRequest>
	  if (HAL_I2C_Slave_Transmit(&hi2c1, I2C_Buffer, sizeof(I2C_Buffer), HAL_MAX_DELAY) == HAL_OK)
 8000270:	e7f2      	b.n	8000258 <main+0x3c>
 8000272:	bf00      	nop
 8000274:	40012c00 	.word	0x40012c00
 8000278:	2000007c 	.word	0x2000007c
 800027c:	20000114 	.word	0x20000114
 8000280:	20000028 	.word	0x20000028

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b096      	sub	sp, #88	; 0x58
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2244      	movs	r2, #68	; 0x44
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f004 fa38 	bl	8004708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002aa:	f001 fbe9 	bl	8001a80 <HAL_PWREx_ControlVoltageScaling>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002b4:	f000 f99a 	bl	80005ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002b8:	2310      	movs	r3, #16
 80002ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002c4:	2360      	movs	r3, #96	; 0x60
 80002c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 fc2b 	bl	8001b2c <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002dc:	f000 f986 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f4:	463b      	mov	r3, r7
 80002f6:	2100      	movs	r1, #0
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 f82b 	bl	8002354 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000304:	f000 f972 	bl	80005ec <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3758      	adds	r7, #88	; 0x58
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_I2C1_Init+0x74>)
 8000316:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <MX_I2C1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000004;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_I2C1_Init+0x74>)
 800031c:	2204      	movs	r2, #4
 800031e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 80;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_I2C1_Init+0x74>)
 8000322:	2250      	movs	r2, #80	; 0x50
 8000324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_I2C1_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_I2C1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034a:	480e      	ldr	r0, [pc, #56]	; (8000384 <MX_I2C1_Init+0x74>)
 800034c:	f000 ff60 	bl	8001210 <HAL_I2C_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000356:	f000 f949 	bl	80005ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035a:	2100      	movs	r1, #0
 800035c:	4809      	ldr	r0, [pc, #36]	; (8000384 <MX_I2C1_Init+0x74>)
 800035e:	f001 fae9 	bl	8001934 <HAL_I2CEx_ConfigAnalogFilter>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000368:	f000 f940 	bl	80005ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800036c:	2100      	movs	r1, #0
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_I2C1_Init+0x74>)
 8000370:	f001 fb2b 	bl	80019ca <HAL_I2CEx_ConfigDigitalFilter>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 f937 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028
 8000388:	40005400 	.word	0x40005400

0800038c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b0a2      	sub	sp, #136	; 0x88
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]
 80003da:	615a      	str	r2, [r3, #20]
 80003dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003de:	463b      	mov	r3, r7
 80003e0:	222c      	movs	r2, #44	; 0x2c
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f004 f98f 	bl	8004708 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ea:	4b63      	ldr	r3, [pc, #396]	; (8000578 <MX_TIM1_Init+0x1ec>)
 80003ec:	4a63      	ldr	r2, [pc, #396]	; (800057c <MX_TIM1_Init+0x1f0>)
 80003ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40-1;
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <MX_TIM1_Init+0x1ec>)
 80003f2:	2227      	movs	r2, #39	; 0x27
 80003f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f6:	4b60      	ldr	r3, [pc, #384]	; (8000578 <MX_TIM1_Init+0x1ec>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80003fc:	4b5e      	ldr	r3, [pc, #376]	; (8000578 <MX_TIM1_Init+0x1ec>)
 80003fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8000402:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000404:	4b5c      	ldr	r3, [pc, #368]	; (8000578 <MX_TIM1_Init+0x1ec>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040a:	4b5b      	ldr	r3, [pc, #364]	; (8000578 <MX_TIM1_Init+0x1ec>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000410:	4b59      	ldr	r3, [pc, #356]	; (8000578 <MX_TIM1_Init+0x1ec>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000416:	4858      	ldr	r0, [pc, #352]	; (8000578 <MX_TIM1_Init+0x1ec>)
 8000418:	f002 fc70 	bl	8002cfc <HAL_TIM_Base_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000422:	f000 f8e3 	bl	80005ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800042a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800042c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000430:	4619      	mov	r1, r3
 8000432:	4851      	ldr	r0, [pc, #324]	; (8000578 <MX_TIM1_Init+0x1ec>)
 8000434:	f003 fa18 	bl	8003868 <HAL_TIM_ConfigClockSource>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800043e:	f000 f8d5 	bl	80005ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000442:	484d      	ldr	r0, [pc, #308]	; (8000578 <MX_TIM1_Init+0x1ec>)
 8000444:	f002 fcb1 	bl	8002daa <HAL_TIM_PWM_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800044e:	f000 f8cd 	bl	80005ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000452:	4849      	ldr	r0, [pc, #292]	; (8000578 <MX_TIM1_Init+0x1ec>)
 8000454:	f002 fde8 	bl	8003028 <HAL_TIM_IC_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800045e:	f000 f8c5 	bl	80005ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000462:	2304      	movs	r3, #4
 8000464:	667b      	str	r3, [r7, #100]	; 0x64
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000466:	2350      	movs	r3, #80	; 0x50
 8000468:	66bb      	str	r3, [r7, #104]	; 0x68
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800046a:	2300      	movs	r3, #0
 800046c:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	673b      	str	r3, [r7, #112]	; 0x70
  sSlaveConfig.TriggerFilter = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000476:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800047a:	4619      	mov	r1, r3
 800047c:	483e      	ldr	r0, [pc, #248]	; (8000578 <MX_TIM1_Init+0x1ec>)
 800047e:	f003 fabc 	bl	80039fa <HAL_TIM_SlaveConfigSynchro>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000488:	f000 f8b0 	bl	80005ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800048c:	2300      	movs	r3, #0
 800048e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000490:	2301      	movs	r3, #1
 8000492:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigIC.ICFilter = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800049c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	4834      	ldr	r0, [pc, #208]	; (8000578 <MX_TIM1_Init+0x1ec>)
 80004a6:	f003 f82f 	bl	8003508 <HAL_TIM_IC_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80004b0:	f000 f89c 	bl	80005ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80004b4:	2302      	movs	r3, #2
 80004b6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80004b8:	2302      	movs	r3, #2
 80004ba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80004bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004c0:	2204      	movs	r2, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	482c      	ldr	r0, [pc, #176]	; (8000578 <MX_TIM1_Init+0x1ec>)
 80004c6:	f003 f81f 	bl	8003508 <HAL_TIM_IC_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80004d0:	f000 f88c 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004d8:	2300      	movs	r3, #0
 80004da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004dc:	2300      	movs	r3, #0
 80004de:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004e4:	4619      	mov	r1, r3
 80004e6:	4824      	ldr	r0, [pc, #144]	; (8000578 <MX_TIM1_Init+0x1ec>)
 80004e8:	f004 f80c 	bl	8004504 <HAL_TIMEx_MasterConfigSynchronization>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 80004f2:	f000 f87b 	bl	80005ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004f6:	2360      	movs	r3, #96	; 0x60
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fe:	2300      	movs	r3, #0
 8000500:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000502:	2300      	movs	r3, #0
 8000504:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000506:	2300      	movs	r3, #0
 8000508:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800050a:	2300      	movs	r3, #0
 800050c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800050e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000512:	220c      	movs	r2, #12
 8000514:	4619      	mov	r1, r3
 8000516:	4818      	ldr	r0, [pc, #96]	; (8000578 <MX_TIM1_Init+0x1ec>)
 8000518:	f003 f892 	bl	8003640 <HAL_TIM_PWM_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 8000522:	f000 f863 	bl	80005ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800053a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800054c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <MX_TIM1_Init+0x1ec>)
 800055c:	f004 f838 	bl	80045d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM1_Init+0x1de>
  {
    Error_Handler();
 8000566:	f000 f841 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <MX_TIM1_Init+0x1ec>)
 800056c:	f000 f946 	bl	80007fc <HAL_TIM_MspPostInit>

}
 8000570:	bf00      	nop
 8000572:	3788      	adds	r7, #136	; 0x88
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000007c 	.word	0x2000007c
 800057c:	40012c00 	.word	0x40012c00

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x38>)
 8000588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x38>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6493      	str	r3, [r2, #72]	; 0x48
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x38>)
 8000594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200e      	movs	r0, #14
 80005a4:	f000 fb2b 	bl	8000bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005a8:	200e      	movs	r0, #14
 80005aa:	f000 fb44 	bl	8000c36 <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_GPIO_Init+0x2c>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x2c>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_GPIO_Init+0x2c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <HAL_MspInit+0x44>)
 8000600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000602:	4a0e      	ldr	r2, [pc, #56]	; (800063c <HAL_MspInit+0x44>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6613      	str	r3, [r2, #96]	; 0x60
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <HAL_MspInit+0x44>)
 800060c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <HAL_MspInit+0x44>)
 8000618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <HAL_MspInit+0x44>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	6593      	str	r3, [r2, #88]	; 0x58
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_MspInit+0x44>)
 8000624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09e      	sub	sp, #120	; 0x78
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	2254      	movs	r2, #84	; 0x54
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f004 f851 	bl	8004708 <memset>
  if(hi2c->Instance==I2C1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <HAL_I2C_MspInit+0xb8>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d13f      	bne.n	80006f0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f855 	bl	800272c <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000688:	f7ff ffb0 	bl	80005ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_I2C_MspInit+0xbc>)
 800068e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000690:	4a1a      	ldr	r2, [pc, #104]	; (80006fc <HAL_I2C_MspInit+0xbc>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000698:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_I2C_MspInit+0xbc>)
 800069a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006aa:	2312      	movs	r3, #18
 80006ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2302      	movs	r3, #2
 80006b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006b6:	2304      	movs	r3, #4
 80006b8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 fc3a 	bl	8000f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_I2C_MspInit+0xbc>)
 80006ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <HAL_I2C_MspInit+0xbc>)
 80006ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d2:	6593      	str	r3, [r2, #88]	; 0x58
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_I2C_MspInit+0xbc>)
 80006d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	201f      	movs	r0, #31
 80006e6:	f000 fa8a 	bl	8000bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006ea:	201f      	movs	r0, #31
 80006ec:	f000 faa3 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3778      	adds	r7, #120	; 0x78
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a33      	ldr	r2, [pc, #204]	; (80007ec <HAL_TIM_Base_MspInit+0xec>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d160      	bne.n	80007e4 <HAL_TIM_Base_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <HAL_TIM_Base_MspInit+0xf0>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <HAL_TIM_Base_MspInit+0xf0>)
 8000728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <HAL_TIM_Base_MspInit+0xf0>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <HAL_TIM_Base_MspInit+0xf0>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <HAL_TIM_Base_MspInit+0xf0>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <HAL_TIM_Base_MspInit+0xf0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000764:	2301      	movs	r3, #1
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fbe3 	bl	8000f3c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA1_Channel4;
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 8000778:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <HAL_TIM_Base_MspInit+0xf8>)
 800077a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Request = DMA_REQUEST_7;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 800077e:	2207      	movs	r2, #7
 8000780:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 8000784:	2210      	movs	r2, #16
 8000786:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 8000796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 800079e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_NORMAL;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007b2:	f000 fa5b 	bl	8000c6c <HAL_DMA_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <HAL_TIM_Base_MspInit+0xc0>
    {
      Error_Handler();
 80007bc:	f7ff ff16 	bl	80005ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
 80007c6:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <HAL_TIM_Base_MspInit+0xf4>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40012c00 	.word	0x40012c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	200000c8 	.word	0x200000c8
 80007f8:	40020044 	.word	0x40020044

080007fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a12      	ldr	r2, [pc, #72]	; (8000864 <HAL_TIM_MspPostInit+0x68>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d11d      	bne.n	800085a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_TIM_MspPostInit+0x6c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <HAL_TIM_MspPostInit+0x6c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_TIM_MspPostInit+0x6c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000836:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800083a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f000 fb71 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40012c00 	.word	0x40012c00
 8000868:	40021000 	.word	0x40021000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <NMI_Handler+0x4>

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f8a6 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <DMA1_Channel4_IRQHandler+0x10>)
 80008c6:	f000 fa89 	bl	8000ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000c8 	.word	0x200000c8

080008d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <I2C1_EV_IRQHandler+0x10>)
 80008da:	f000 fe45 	bl	8001568 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000028 	.word	0x20000028

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000910:	f7ff ffea 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <LoopForever+0xe>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	; (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f003 fec1 	bl	80046c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093e:	f7ff fc6d 	bl	800021c <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000944:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000950:	08004778 	.word	0x08004778
  ldr r2, =_sbss
 8000954:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000958:	2000011c 	.word	0x2000011c

0800095c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_IRQHandler>

0800095e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000964:	2300      	movs	r3, #0
 8000966:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f93d 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f80e 	bl	8000990 <HAL_InitTick>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d002      	beq.n	8000980 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	e001      	b.n	8000984 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000980:	f7ff fe3a 	bl	80005f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000984:	79fb      	ldrb	r3, [r7, #7]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_InitTick+0x6c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d023      	beq.n	80009ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_InitTick+0x70>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_InitTick+0x6c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f949 	bl	8000c52 <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10f      	bne.n	80009e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d809      	bhi.n	80009e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009d4:	f000 f913 	bl	8000bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_InitTick+0x74>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	e007      	b.n	80009f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e004      	b.n	80009f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e001      	b.n	80009f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000118 	.word	0x20000118

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000118 	.word	0x20000118

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <__NVIC_EnableIRQ+0x38>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc8:	f7ff ff8e 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff29 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff3e 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff8e 	bl	8000b3c <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff31 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffa2 	bl	8000ba4 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e098      	b.n	8000db0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b4d      	ldr	r3, [pc, #308]	; (8000dbc <HAL_DMA_Init+0x150>)
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d80f      	bhi.n	8000caa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <HAL_DMA_Init+0x154>)
 8000c92:	4413      	add	r3, r2
 8000c94:	4a4b      	ldr	r2, [pc, #300]	; (8000dc4 <HAL_DMA_Init+0x158>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	009a      	lsls	r2, r3, #2
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_DMA_Init+0x15c>)
 8000ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca8:	e00e      	b.n	8000cc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_DMA_Init+0x160>)
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a43      	ldr	r2, [pc, #268]	; (8000dc4 <HAL_DMA_Init+0x158>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	009a      	lsls	r2, r3, #2
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a42      	ldr	r2, [pc, #264]	; (8000dd0 <HAL_DMA_Init+0x164>)
 8000cc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ce2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d22:	d039      	beq.n	8000d98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <HAL_DMA_Init+0x15c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d11a      	bne.n	8000d64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <HAL_DMA_Init+0x168>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f003 031c 	and.w	r3, r3, #28
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <HAL_DMA_Init+0x168>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <HAL_DMA_Init+0x168>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6859      	ldr	r1, [r3, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d54:	f003 031c 	and.w	r3, r3, #28
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	491d      	ldr	r1, [pc, #116]	; (8000dd4 <HAL_DMA_Init+0x168>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
 8000d62:	e019      	b.n	8000d98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_DMA_Init+0x16c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f003 031c 	and.w	r3, r3, #28
 8000d70:	210f      	movs	r1, #15
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4917      	ldr	r1, [pc, #92]	; (8000dd8 <HAL_DMA_Init+0x16c>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_DMA_Init+0x16c>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6859      	ldr	r1, [r3, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f003 031c 	and.w	r3, r3, #28
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	4911      	ldr	r1, [pc, #68]	; (8000dd8 <HAL_DMA_Init+0x16c>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40020407 	.word	0x40020407
 8000dc0:	bffdfff8 	.word	0xbffdfff8
 8000dc4:	cccccccd 	.word	0xcccccccd
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	bffdfbf8 	.word	0xbffdfbf8
 8000dd0:	40020400 	.word	0x40020400
 8000dd4:	400200a8 	.word	0x400200a8
 8000dd8:	400204a8 	.word	0x400204a8

08000ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df8:	f003 031c 	and.w	r3, r3, #28
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d026      	beq.n	8000e56 <HAL_DMA_IRQHandler+0x7a>
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d021      	beq.n	8000e56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d107      	bne.n	8000e30 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0204 	bic.w	r2, r2, #4
 8000e2e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f003 021c 	and.w	r2, r3, #28
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e42:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d071      	beq.n	8000f30 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000e54:	e06c      	b.n	8000f30 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f003 031c 	and.w	r3, r3, #28
 8000e5e:	2202      	movs	r2, #2
 8000e60:	409a      	lsls	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d02e      	beq.n	8000ec8 <HAL_DMA_IRQHandler+0xec>
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d029      	beq.n	8000ec8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10b      	bne.n	8000e9a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 020a 	bic.w	r2, r2, #10
 8000e90:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f003 021c 	and.w	r2, r3, #28
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d038      	beq.n	8000f30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ec6:	e033      	b.n	8000f30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	f003 031c 	and.w	r3, r3, #28
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d02a      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x156>
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d025      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 020e 	bic.w	r2, r2, #14
 8000ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f003 021c 	and.w	r2, r3, #28
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	2101      	movs	r1, #1
 8000f04:	fa01 f202 	lsl.w	r2, r1, r2
 8000f08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
}
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e148      	b.n	80011de <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 813a 	beq.w	80011d8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d130      	bne.n	8000fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0201 	and.w	r2, r3, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d017      	beq.n	800101a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d123      	bne.n	800106e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	6939      	ldr	r1, [r7, #16]
 800106a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0203 	and.w	r2, r3, #3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8094 	beq.w	80011d8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	4b52      	ldr	r3, [pc, #328]	; (80011fc <HAL_GPIO_Init+0x2c0>)
 80010b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b4:	4a51      	ldr	r2, [pc, #324]	; (80011fc <HAL_GPIO_Init+0x2c0>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6613      	str	r3, [r2, #96]	; 0x60
 80010bc:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <HAL_GPIO_Init+0x2c0>)
 80010be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c8:	4a4d      	ldr	r2, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f2:	d00d      	beq.n	8001110 <HAL_GPIO_Init+0x1d4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a43      	ldr	r2, [pc, #268]	; (8001204 <HAL_GPIO_Init+0x2c8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1d0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a42      	ldr	r2, [pc, #264]	; (8001208 <HAL_GPIO_Init+0x2cc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_GPIO_Init+0x1cc>
 8001104:	2302      	movs	r3, #2
 8001106:	e004      	b.n	8001112 <HAL_GPIO_Init+0x1d6>
 8001108:	2307      	movs	r3, #7
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x1d6>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_GPIO_Init+0x1d6>
 8001110:	2300      	movs	r3, #0
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	4093      	lsls	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001122:	4937      	ldr	r1, [pc, #220]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001154:	4a2d      	ldr	r2, [pc, #180]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117e:	4a23      	ldr	r2, [pc, #140]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f47f aeaf 	bne.w	8000f4c <HAL_GPIO_Init+0x10>
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40021000 	.word	0x40021000
 8001200:	40010000 	.word	0x40010000
 8001204:	48000400 	.word	0x48000400
 8001208:	48000800 	.word	0x48000800
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e081      	b.n	8001326 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fa02 	bl	8000640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2224      	movs	r2, #36	; 0x24
 8001240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001260:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001270:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	e006      	b.n	8001298 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001296:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d104      	bne.n	80012aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691a      	ldr	r2, [r3, #16]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69d9      	ldr	r1, [r3, #28]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0201 	orr.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2220      	movs	r2, #32
 8001312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b088      	sub	sp, #32
 8001332:	af02      	add	r7, sp, #8
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4613      	mov	r3, r2
 800133c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b20      	cmp	r3, #32
 8001348:	f040 8109 	bne.w	800155e <HAL_I2C_Slave_Transmit+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <HAL_I2C_Slave_Transmit+0x2a>
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d105      	bne.n	8001364 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0fd      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800136a:	2b01      	cmp	r3, #1
 800136c:	d101      	bne.n	8001372 <HAL_I2C_Slave_Transmit+0x44>
 800136e:	2302      	movs	r3, #2
 8001370:	e0f6      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800137a:	f7ff fb59 	bl	8000a30 <HAL_GetTick>
 800137e:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2221      	movs	r2, #33	; 0x21
 8001384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2220      	movs	r2, #32
 800138c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013b6:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f90e 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013dc:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0be      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2208      	movs	r2, #8
 80013e8:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d118      	bne.n	8001424 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	2108      	movs	r1, #8
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 f8f1 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001416:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0a1      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2208      	movs	r2, #8
 8001422:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f000 f8d7 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d02d      	beq.n	8001498 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800144a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e087      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f905 	bl	8001664 <I2C_WaitOnTXISFlagUntilTimeout>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800146e:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e075      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800148e:	b29b      	uxth	r3, r3
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1d6      	bne.n	8001450 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	2110      	movs	r1, #16
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f899 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <HAL_I2C_Slave_Transmit+0x19e>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014c6:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e049      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f865 	bl	800159c <I2C_Flush_TXDR>

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2210      	movs	r2, #16
 80014d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f900 	bl	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_I2C_Slave_Transmit+0x1d0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014f8:	605a      	str	r2, [r3, #4]

      return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e030      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2220      	movs	r2, #32
 8001504:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f866 	bl	80015e4 <I2C_WaitOnFlagUntilTimeout>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_I2C_Slave_Transmit+0x204>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800152c:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e016      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001540:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_I2C_Slave_Transmit+0x232>
  }
  else
  {
    return HAL_BUSY;
 800155e:	2302      	movs	r3, #2
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	68f9      	ldr	r1, [r7, #12]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
  }
}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d103      	bne.n	80015ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d007      	beq.n	80015d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	699a      	ldr	r2, [r3, #24]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	619a      	str	r2, [r3, #24]
  }
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015f4:	e022      	b.n	800163c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015fc:	d01e      	beq.n	800163c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015fe:	f7ff fa17 	bl	8000a30 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d302      	bcc.n	8001614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d113      	bne.n	800163c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001618:	f043 0220 	orr.w	r2, r3, #32
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e00f      	b.n	800165c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4013      	ands	r3, r2
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	bf0c      	ite	eq
 800164c:	2301      	moveq	r3, #1
 800164e:	2300      	movne	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	429a      	cmp	r2, r3
 8001658:	d0cd      	beq.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001670:	e02c      	b.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f870 	bl	800175c <I2C_IsErrorOccurred>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e02a      	b.n	80016dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800168c:	d01e      	beq.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168e:	f7ff f9cf 	bl	8000a30 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	429a      	cmp	r2, r3
 800169c:	d302      	bcc.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d113      	bne.n	80016cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f043 0220 	orr.w	r2, r3, #32
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e007      	b.n	80016dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d1cb      	bne.n	8001672 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f0:	e028      	b.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f830 	bl	800175c <I2C_IsErrorOccurred>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e026      	b.n	8001754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001706:	f7ff f993 	bl	8000a30 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	429a      	cmp	r2, r3
 8001714:	d302      	bcc.n	800171c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d113      	bne.n	8001744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	f043 0220 	orr.w	r2, r3, #32
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e007      	b.n	8001754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b20      	cmp	r3, #32
 8001750:	d1cf      	bne.n	80016f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	d075      	beq.n	8001874 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2210      	movs	r2, #16
 800178e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001790:	e056      	b.n	8001840 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001798:	d052      	beq.n	8001840 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff f949 	bl	8000a30 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d302      	bcc.n	80017b0 <I2C_IsErrorOccurred+0x54>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d147      	bne.n	8001840 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017d2:	d12e      	bne.n	8001832 <I2C_IsErrorOccurred+0xd6>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017da:	d02a      	beq.n	8001832 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80017dc:	7cfb      	ldrb	r3, [r7, #19]
 80017de:	2b20      	cmp	r3, #32
 80017e0:	d027      	beq.n	8001832 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80017f2:	f7ff f91d 	bl	8000a30 <HAL_GetTick>
 80017f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f8:	e01b      	b.n	8001832 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80017fa:	f7ff f919 	bl	8000a30 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b19      	cmp	r3, #25
 8001806:	d914      	bls.n	8001832 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0320 	and.w	r3, r3, #32
 800183c:	2b20      	cmp	r3, #32
 800183e:	d1dc      	bne.n	80017fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b20      	cmp	r3, #32
 800184c:	d003      	beq.n	8001856 <I2C_IsErrorOccurred+0xfa>
 800184e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001852:	2b00      	cmp	r3, #0
 8001854:	d09d      	beq.n	8001792 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2220      	movs	r2, #32
 8001864:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001896:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80018e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01c      	beq.n	8001924 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff fe56 	bl	800159c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6859      	ldr	r1, [r3, #4]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <I2C_IsErrorOccurred+0x1d4>)
 80018fc:	400b      	ands	r3, r1
 80018fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	431a      	orrs	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001928:	4618      	mov	r0, r3
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	fe00e800 	.word	0xfe00e800

08001934 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b20      	cmp	r3, #32
 8001948:	d138      	bne.n	80019bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001954:	2302      	movs	r3, #2
 8001956:	e032      	b.n	80019be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001986:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e000      	b.n	80019be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
  }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d139      	bne.n	8001a54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e033      	b.n	8001a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2224      	movs	r2, #36	; 0x24
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0201 	bic.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000

08001a80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a8e:	d130      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a9c:	d038      	beq.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa6:	4a1e      	ldr	r2, [pc, #120]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2232      	movs	r2, #50	; 0x32
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac4:	e002      	b.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad8:	d102      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f2      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aec:	d110      	bne.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e00f      	b.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d007      	beq.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b08:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40007000 	.word	0x40007000
 8001b24:	20000000 	.word	0x20000000
 8001b28:	431bde83 	.word	0x431bde83

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f000 bc02 	b.w	8002344 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b40:	4b96      	ldr	r3, [pc, #600]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4a:	4b94      	ldr	r3, [pc, #592]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80e4 	beq.w	8001d2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d007      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4c>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	f040 808b 	bne.w	8001c86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	f040 8087 	bne.w	8001c86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b78:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_OscConfig+0x64>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e3d9      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <HAL_RCC_OscConfig+0x7e>
 8001ba0:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba8:	e005      	b.n	8001bb6 <HAL_RCC_OscConfig+0x8a>
 8001baa:	4b7c      	ldr	r3, [pc, #496]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d223      	bcs.n	8001c02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fd54 	bl	800266c <RCC_SetFlashLatencyFromMSIRange>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e3ba      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a72      	ldr	r2, [pc, #456]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	496d      	ldr	r1, [pc, #436]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bec:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	4968      	ldr	r1, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
 8001c00:	e025      	b.n	8001c4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c02:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a65      	ldr	r2, [pc, #404]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4960      	ldr	r1, [pc, #384]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c20:	4b5e      	ldr	r3, [pc, #376]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	495b      	ldr	r1, [pc, #364]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fd14 	bl	800266c <RCC_SetFlashLatencyFromMSIRange>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e37a      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c4e:	f000 fc81 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b51      	ldr	r3, [pc, #324]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4950      	ldr	r1, [pc, #320]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <HAL_RCC_OscConfig+0x278>)
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fe8c 	bl	8000990 <HAL_InitTick>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d052      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	e35e      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d032      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c8e:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a42      	ldr	r2, [pc, #264]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c9a:	f7fe fec9 	bl	8000a30 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca2:	f7fe fec5 	bl	8000a30 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e347      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4930      	ldr	r1, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	492b      	ldr	r1, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
 8001cf2:	e01a      	b.n	8001d2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d00:	f7fe fe96 	bl	8000a30 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d08:	f7fe fe92 	bl	8000a30 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e314      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x1dc>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d073      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x21c>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b0c      	cmp	r3, #12
 8001d40:	d10e      	bne.n	8001d60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d10b      	bne.n	8001d60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d063      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d15f      	bne.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e2f1      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d68:	d106      	bne.n	8001d78 <HAL_RCC_OscConfig+0x24c>
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e025      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d80:	d114      	bne.n	8001dac <HAL_RCC_OscConfig+0x280>
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a02      	ldr	r2, [pc, #8]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x298>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08004730 	.word	0x08004730
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004
 8001dac:	4ba0      	ldr	r3, [pc, #640]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a9f      	ldr	r2, [pc, #636]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b9d      	ldr	r3, [pc, #628]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a9c      	ldr	r2, [pc, #624]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fe30 	bl	8000a30 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7fe fe2c 	bl	8000a30 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e2ae      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	4b92      	ldr	r3, [pc, #584]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x2a8>
 8001df2:	e014      	b.n	8001e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe fe1c 	bl	8000a30 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7fe fe18 	bl	8000a30 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e29a      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2d0>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d060      	beq.n	8001eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_OscConfig+0x310>
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d119      	bne.n	8001e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d116      	bne.n	8001e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3c:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_OscConfig+0x328>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e277      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	061b      	lsls	r3, r3, #24
 8001e62:	4973      	ldr	r1, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e68:	e040      	b.n	8001eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d023      	beq.n	8001eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e72:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7fe fdd7 	bl	8000a30 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e86:	f7fe fdd3 	bl	8000a30 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e255      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e98:	4b65      	ldr	r3, [pc, #404]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b62      	ldr	r3, [pc, #392]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	495f      	ldr	r1, [pc, #380]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	e018      	b.n	8001eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fdb3 	bl	8000a30 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7fe fdaf 	bl	8000a30 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e231      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d03c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d01c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f00:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f06:	4a4a      	ldr	r2, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7fe fd8e 	bl	8000a30 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe fd8a 	bl	8000a30 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e20c      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ef      	beq.n	8001f18 <HAL_RCC_OscConfig+0x3ec>
 8001f38:	e01b      	b.n	8001f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f3a:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f40:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4a:	f7fe fd71 	bl	8000a30 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f52:	f7fe fd6d 	bl	8000a30 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e1ef      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f64:	4b32      	ldr	r3, [pc, #200]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ef      	bne.n	8001f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80a6 	beq.w	80020cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10d      	bne.n	8001fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <HAL_RCC_OscConfig+0x508>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d118      	bne.n	8001fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_OscConfig+0x508>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_RCC_OscConfig+0x508>)
 8001fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe fd34 	bl	8000a30 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fcc:	f7fe fd30 	bl	8000a30 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1b2      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_RCC_OscConfig+0x508>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d108      	bne.n	8002004 <HAL_RCC_OscConfig+0x4d8>
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002002:	e029      	b.n	8002058 <HAL_RCC_OscConfig+0x52c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d115      	bne.n	8002038 <HAL_RCC_OscConfig+0x50c>
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 800201e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002022:	4a03      	ldr	r2, [pc, #12]	; (8002030 <HAL_RCC_OscConfig+0x504>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x52c>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	4b9a      	ldr	r3, [pc, #616]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	4a99      	ldr	r2, [pc, #612]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002048:	4b96      	ldr	r3, [pc, #600]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	4a95      	ldr	r2, [pc, #596]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d016      	beq.n	800208e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7fe fce6 	bl	8000a30 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7fe fce2 	bl	8000a30 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e162      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	4b89      	ldr	r3, [pc, #548]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ed      	beq.n	8002068 <HAL_RCC_OscConfig+0x53c>
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7fe fccf 	bl	8000a30 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fccb 	bl	8000a30 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e14b      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	4b7d      	ldr	r3, [pc, #500]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ed      	bne.n	8002096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ba:	7ffb      	ldrb	r3, [r7, #31]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	4a77      	ldr	r2, [pc, #476]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03c      	beq.n	8002152 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01c      	beq.n	800211a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e0:	4b70      	ldr	r3, [pc, #448]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80020e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e6:	4a6f      	ldr	r2, [pc, #444]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe fc9e 	bl	8000a30 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020f8:	f7fe fc9a 	bl	8000a30 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e11c      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800210a:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 800210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ef      	beq.n	80020f8 <HAL_RCC_OscConfig+0x5cc>
 8002118:	e01b      	b.n	8002152 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800211a:	4b62      	ldr	r3, [pc, #392]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 800211c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002120:	4a60      	ldr	r2, [pc, #384]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe fc81 	bl	8000a30 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002132:	f7fe fc7d 	bl	8000a30 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0ff      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002144:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ef      	bne.n	8002132 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80f3 	beq.w	8002342 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	2b02      	cmp	r3, #2
 8002162:	f040 80c9 	bne.w	80022f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002166:	4b4f      	ldr	r3, [pc, #316]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0203 	and.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	429a      	cmp	r2, r3
 8002178:	d12c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	3b01      	subs	r3, #1
 8002186:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d123      	bne.n	80021d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d11b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d113      	bne.n	80021d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	3b01      	subs	r3, #1
 80021ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d109      	bne.n	80021d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	085b      	lsrs	r3, r3, #1
 80021cc:	3b01      	subs	r3, #1
 80021ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d06b      	beq.n	80022ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d062      	beq.n	80022a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0ac      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021ea:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a2d      	ldr	r2, [pc, #180]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 80021f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f6:	f7fe fc1b 	bl	8000a30 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe fc17 	bl	8000a30 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e099      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800221c:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCC_OscConfig+0x77c>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800222c:	3a01      	subs	r2, #1
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002236:	0212      	lsls	r2, r2, #8
 8002238:	4311      	orrs	r1, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800223e:	0852      	lsrs	r2, r2, #1
 8002240:	3a01      	subs	r2, #1
 8002242:	0552      	lsls	r2, r2, #21
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800224a:	0852      	lsrs	r2, r2, #1
 800224c:	3a01      	subs	r2, #1
 800224e:	0652      	lsls	r2, r2, #25
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002256:	06d2      	lsls	r2, r2, #27
 8002258:	430a      	orrs	r2, r1
 800225a:	4912      	ldr	r1, [pc, #72]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 800225c:	4313      	orrs	r3, r2
 800225e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002276:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002278:	f7fe fbda 	bl	8000a30 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fbd6 	bl	8000a30 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e058      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RCC_OscConfig+0x778>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229e:	e050      	b.n	8002342 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e04f      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
 80022a4:	40021000 	.word	0x40021000
 80022a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x820>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d144      	bne.n	8002342 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_RCC_OscConfig+0x820>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a23      	ldr	r2, [pc, #140]	; (800234c <HAL_RCC_OscConfig+0x820>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <HAL_RCC_OscConfig+0x820>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_RCC_OscConfig+0x820>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d0:	f7fe fbae 	bl	8000a30 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fbaa 	bl	8000a30 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e02c      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_RCC_OscConfig+0x820>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x7ac>
 80022f6:	e024      	b.n	8002342 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d01f      	beq.n	800233e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_RCC_OscConfig+0x820>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_RCC_OscConfig+0x820>)
 8002304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe fb91 	bl	8000a30 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe fb8d 	bl	8000a30 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e00f      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_OscConfig+0x820>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x820>)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	4905      	ldr	r1, [pc, #20]	; (800234c <HAL_RCC_OscConfig+0x820>)
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_OscConfig+0x824>)
 8002338:	4013      	ands	r3, r2
 800233a:	60cb      	str	r3, [r1, #12]
 800233c:	e001      	b.n	8002342 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	feeefffc 	.word	0xfeeefffc

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0e7      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b75      	ldr	r3, [pc, #468]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d910      	bls.n	8002398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b72      	ldr	r3, [pc, #456]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4970      	ldr	r1, [pc, #448]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b6e      	ldr	r3, [pc, #440]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0cf      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d010      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	4b66      	ldr	r3, [pc, #408]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d908      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4960      	ldr	r1, [pc, #384]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d04c      	beq.n	800246c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	4b5a      	ldr	r3, [pc, #360]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d121      	bne.n	800242a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0a6      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e09a      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800240a:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e08e      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e086      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4943      	ldr	r1, [pc, #268]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243c:	f7fe faf8 	bl	8000a30 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7fe faf4 	bl	8000a30 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e06e      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d010      	beq.n	800249a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002484:	429a      	cmp	r2, r3
 8002486:	d208      	bcs.n	800249a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	492b      	ldr	r1, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d210      	bcs.n	80024ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 0207 	bic.w	r2, r3, #7
 80024b0:	4923      	ldr	r1, [pc, #140]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_RCC_ClockConfig+0x1ec>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e036      	b.n	8002538 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	4918      	ldr	r1, [pc, #96]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4910      	ldr	r1, [pc, #64]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002508:	f000 f824 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCC_ClockConfig+0x1f0>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	490b      	ldr	r1, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1f4>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1f8>)
 8002526:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1fc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fa2f 	bl	8000990 <HAL_InitTick>
 8002532:	4603      	mov	r3, r0
 8002534:	72fb      	strb	r3, [r7, #11]

  return status;
 8002536:	7afb      	ldrb	r3, [r7, #11]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	08004730 	.word	0x08004730
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800256c:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x34>
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d121      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d11e      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002588:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 8002596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e005      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025b0:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10d      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	e004      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_RCC_GetSysClockFreq+0x114>)
 80025da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d134      	bne.n	800264c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025e2:	4b1e      	ldr	r3, [pc, #120]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d003      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0xa6>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d003      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0xac>
 80025f8:	e005      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_RCC_GetSysClockFreq+0x110>)
 80025fc:	617b      	str	r3, [r7, #20]
      break;
 80025fe:	e005      	b.n	800260c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_GetSysClockFreq+0x114>)
 8002602:	617b      	str	r3, [r7, #20]
      break;
 8002604:	e002      	b.n	800260c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	617b      	str	r3, [r7, #20]
      break;
 800260a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	3301      	adds	r3, #1
 8002618:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	fb03 f202 	mul.w	r2, r3, r2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_RCC_GetSysClockFreq+0x108>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	0e5b      	lsrs	r3, r3, #25
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	3301      	adds	r3, #1
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800264c:	69bb      	ldr	r3, [r7, #24]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	08004740 	.word	0x08004740
 8002664:	00f42400 	.word	0x00f42400
 8002668:	007a1200 	.word	0x007a1200

0800266c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002684:	f7ff f9ee 	bl	8001a64 <HAL_PWREx_GetVoltageRange>
 8002688:	6178      	str	r0, [r7, #20]
 800268a:	e014      	b.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	4a24      	ldr	r2, [pc, #144]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002696:	6593      	str	r3, [r2, #88]	; 0x58
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026a4:	f7ff f9de 	bl	8001a64 <HAL_PWREx_GetVoltageRange>
 80026a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026bc:	d10b      	bne.n	80026d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b80      	cmp	r3, #128	; 0x80
 80026c2:	d919      	bls.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2ba0      	cmp	r3, #160	; 0xa0
 80026c8:	d902      	bls.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ca:	2302      	movs	r3, #2
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	e013      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	e010      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d902      	bls.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026dc:	2303      	movs	r3, #3
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	e00a      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d102      	bne.n	80026ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026e8:	2302      	movs	r3, #2
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	e004      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b70      	cmp	r3, #112	; 0x70
 80026f2:	d101      	bne.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026f4:	2301      	movs	r3, #1
 80026f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 0207 	bic.w	r2, r3, #7
 8002700:	4909      	ldr	r1, [pc, #36]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	429a      	cmp	r2, r3
 8002714:	d001      	beq.n	800271a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	40022000 	.word	0x40022000

0800272c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002734:	2300      	movs	r3, #0
 8002736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002738:	2300      	movs	r3, #0
 800273a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002744:	2b00      	cmp	r3, #0
 8002746:	d031      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002750:	d01a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002752:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002756:	d814      	bhi.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800275c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002760:	d10f      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002762:	4b5d      	ldr	r3, [pc, #372]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4a5c      	ldr	r2, [pc, #368]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276e:	e00c      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f9ce 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002780:	e003      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	74fb      	strb	r3, [r7, #19]
      break;
 8002786:	e000      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002788:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278a:	7cfb      	ldrb	r3, [r7, #19]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002790:	4b51      	ldr	r3, [pc, #324]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	494e      	ldr	r1, [pc, #312]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027a6:	e001      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 809e 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027be:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d4:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6593      	str	r3, [r2, #88]	; 0x58
 80027e0:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f0:	4b3a      	ldr	r3, [pc, #232]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a39      	ldr	r2, [pc, #228]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027fc:	f7fe f918 	bl	8000a30 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002802:	e009      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe f914 	bl	8000a30 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	74fb      	strb	r3, [r7, #19]
        break;
 8002816:	e005      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ef      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d15a      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800282a:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002834:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01e      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	429a      	cmp	r2, r3
 8002844:	d019      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002862:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe f8d4 	bl	8000a30 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	e00b      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe f8d0 	bl	8000a30 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d902      	bls.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	74fb      	strb	r3, [r7, #19]
            break;
 80028a2:	e006      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ec      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10b      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	4904      	ldr	r1, [pc, #16]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ce:	e009      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e4:	7c7b      	ldrb	r3, [r7, #17]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b8a      	ldr	r3, [pc, #552]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	4a89      	ldr	r2, [pc, #548]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002902:	4b84      	ldr	r3, [pc, #528]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f023 0203 	bic.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4980      	ldr	r1, [pc, #512]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002924:	4b7b      	ldr	r3, [pc, #492]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 020c 	bic.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	4978      	ldr	r1, [pc, #480]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	496f      	ldr	r1, [pc, #444]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	4967      	ldr	r1, [pc, #412]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800298a:	4b62      	ldr	r3, [pc, #392]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	495e      	ldr	r1, [pc, #376]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ac:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	4956      	ldr	r1, [pc, #344]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ce:	4b51      	ldr	r3, [pc, #324]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	494d      	ldr	r1, [pc, #308]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d028      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f0:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4945      	ldr	r1, [pc, #276]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a10:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a1a:	60d3      	str	r3, [r2, #12]
 8002a1c:	e011      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a26:	d10c      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f872 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d028      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a4e:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	492d      	ldr	r1, [pc, #180]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6e:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	4a28      	ldr	r2, [pc, #160]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a78:	60d3      	str	r3, [r2, #12]
 8002a7a:	e011      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f843 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aba:	4916      	ldr	r1, [pc, #88]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f820 	bl	8002b18 <RCCEx_PLLSAI1_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b08:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000

08002b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b26:	4b74      	ldr	r3, [pc, #464]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b32:	4b71      	ldr	r3, [pc, #452]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d10d      	bne.n	8002b5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
       ||
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b4a:	4b6b      	ldr	r3, [pc, #428]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
       ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d047      	beq.n	8002bee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	e044      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d018      	beq.n	8002b9e <RCCEx_PLLSAI1_Config+0x86>
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d825      	bhi.n	8002bbc <RCCEx_PLLSAI1_Config+0xa4>
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d002      	beq.n	8002b7a <RCCEx_PLLSAI1_Config+0x62>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d009      	beq.n	8002b8c <RCCEx_PLLSAI1_Config+0x74>
 8002b78:	e020      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b7a:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d11d      	bne.n	8002bc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8a:	e01a      	b.n	8002bc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d116      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e013      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b9e:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002baa:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bba:	e006      	b.n	8002bca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e004      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e002      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e000      	b.n	8002bcc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10d      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bd2:	4b49      	ldr	r3, [pc, #292]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	430b      	orrs	r3, r1
 8002be8:	4943      	ldr	r1, [pc, #268]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d17c      	bne.n	8002cee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fd ff16 	bl	8000a30 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c06:	e009      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c08:	f7fd ff12 	bl	8000a30 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d902      	bls.n	8002c1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1a:	e005      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1c:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ef      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d15f      	bne.n	8002cee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d110      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c34:	4b30      	ldr	r3, [pc, #192]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6892      	ldr	r2, [r2, #8]
 8002c44:	0211      	lsls	r1, r2, #8
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68d2      	ldr	r2, [r2, #12]
 8002c4a:	06d2      	lsls	r2, r2, #27
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	492a      	ldr	r1, [pc, #168]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	610b      	str	r3, [r1, #16]
 8002c54:	e027      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d112      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6912      	ldr	r2, [r2, #16]
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0552      	lsls	r2, r2, #21
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	491f      	ldr	r1, [pc, #124]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	610b      	str	r3, [r1, #16]
 8002c80:	e011      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
 8002c92:	0211      	lsls	r1, r2, #8
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6952      	ldr	r2, [r2, #20]
 8002c98:	0852      	lsrs	r2, r2, #1
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0652      	lsls	r2, r2, #25
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	4915      	ldr	r1, [pc, #84]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fd febd 	bl	8000a30 <HAL_GetTick>
 8002cb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cb8:	e009      	b.n	8002cce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cba:	f7fd feb9 	bl	8000a30 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d902      	bls.n	8002cce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	73fb      	strb	r3, [r7, #15]
          break;
 8002ccc:	e005      	b.n	8002cda <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0ef      	beq.n	8002cba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e049      	b.n	8002da2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fcec 	bl	8000700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f000 fea0 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e049      	b.n	8002e50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f841 	bl	8002e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f000 fe49 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start+0x24>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e03c      	b.n	8002f0a <HAL_TIM_PWM_Start+0x9e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d109      	bne.n	8002eaa <HAL_TIM_PWM_Start+0x3e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e02f      	b.n	8002f0a <HAL_TIM_PWM_Start+0x9e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d109      	bne.n	8002ec4 <HAL_TIM_PWM_Start+0x58>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e022      	b.n	8002f0a <HAL_TIM_PWM_Start+0x9e>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d109      	bne.n	8002ede <HAL_TIM_PWM_Start+0x72>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	e015      	b.n	8002f0a <HAL_TIM_PWM_Start+0x9e>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d109      	bne.n	8002ef8 <HAL_TIM_PWM_Start+0x8c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e008      	b.n	8002f0a <HAL_TIM_PWM_Start+0x9e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07e      	b.n	8003010 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_PWM_Start+0xb6>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f20:	e023      	b.n	8002f6a <HAL_TIM_PWM_Start+0xfe>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d104      	bne.n	8002f32 <HAL_TIM_PWM_Start+0xc6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f30:	e01b      	b.n	8002f6a <HAL_TIM_PWM_Start+0xfe>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d104      	bne.n	8002f42 <HAL_TIM_PWM_Start+0xd6>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f40:	e013      	b.n	8002f6a <HAL_TIM_PWM_Start+0xfe>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	d104      	bne.n	8002f52 <HAL_TIM_PWM_Start+0xe6>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f50:	e00b      	b.n	8002f6a <HAL_TIM_PWM_Start+0xfe>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d104      	bne.n	8002f62 <HAL_TIM_PWM_Start+0xf6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f60:	e003      	b.n	8002f6a <HAL_TIM_PWM_Start+0xfe>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	6839      	ldr	r1, [r7, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 faa0 	bl	80044b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <HAL_TIM_PWM_Start+0x1ac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x12a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <HAL_TIM_PWM_Start+0x1b0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_PWM_Start+0x12a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a23      	ldr	r2, [pc, #140]	; (8003020 <HAL_TIM_PWM_Start+0x1b4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_TIM_PWM_Start+0x12e>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_TIM_PWM_Start+0x130>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_TIM_PWM_Start+0x1ac>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_TIM_PWM_Start+0x162>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d004      	beq.n	8002fce <HAL_TIM_PWM_Start+0x162>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_TIM_PWM_Start+0x1b0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d115      	bne.n	8002ffa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_TIM_PWM_Start+0x1b8>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d015      	beq.n	800300c <HAL_TIM_PWM_Start+0x1a0>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe6:	d011      	beq.n	800300c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	e008      	b.n	800300c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e000      	b.n	800300e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	00010007 	.word	0x00010007

08003028 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e049      	b.n	80030ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f841 	bl	80030d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f000 fd0a 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_IC_Start+0x1a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003102:	b2db      	uxtb	r3, r3
 8003104:	e023      	b.n	800314e <HAL_TIM_IC_Start+0x62>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d104      	bne.n	8003116 <HAL_TIM_IC_Start+0x2a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e01b      	b.n	800314e <HAL_TIM_IC_Start+0x62>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d104      	bne.n	8003126 <HAL_TIM_IC_Start+0x3a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003122:	b2db      	uxtb	r3, r3
 8003124:	e013      	b.n	800314e <HAL_TIM_IC_Start+0x62>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d104      	bne.n	8003136 <HAL_TIM_IC_Start+0x4a>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003132:	b2db      	uxtb	r3, r3
 8003134:	e00b      	b.n	800314e <HAL_TIM_IC_Start+0x62>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b10      	cmp	r3, #16
 800313a:	d104      	bne.n	8003146 <HAL_TIM_IC_Start+0x5a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e003      	b.n	800314e <HAL_TIM_IC_Start+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800314c:	b2db      	uxtb	r3, r3
 800314e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d104      	bne.n	8003160 <HAL_TIM_IC_Start+0x74>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e013      	b.n	8003188 <HAL_TIM_IC_Start+0x9c>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d104      	bne.n	8003170 <HAL_TIM_IC_Start+0x84>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e00b      	b.n	8003188 <HAL_TIM_IC_Start+0x9c>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d104      	bne.n	8003180 <HAL_TIM_IC_Start+0x94>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e003      	b.n	8003188 <HAL_TIM_IC_Start+0x9c>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003186:	b2db      	uxtb	r3, r3
 8003188:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d102      	bne.n	8003196 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003190:	7bbb      	ldrb	r3, [r7, #14]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07e      	b.n	8003298 <HAL_TIM_IC_Start+0x1ac>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <HAL_TIM_IC_Start+0xbe>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a8:	e023      	b.n	80031f2 <HAL_TIM_IC_Start+0x106>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_IC_Start+0xce>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b8:	e01b      	b.n	80031f2 <HAL_TIM_IC_Start+0x106>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d104      	bne.n	80031ca <HAL_TIM_IC_Start+0xde>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c8:	e013      	b.n	80031f2 <HAL_TIM_IC_Start+0x106>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	d104      	bne.n	80031da <HAL_TIM_IC_Start+0xee>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031d8:	e00b      	b.n	80031f2 <HAL_TIM_IC_Start+0x106>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d104      	bne.n	80031ea <HAL_TIM_IC_Start+0xfe>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e8:	e003      	b.n	80031f2 <HAL_TIM_IC_Start+0x106>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2202      	movs	r2, #2
 80031ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_IC_Start+0x116>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003200:	e013      	b.n	800322a <HAL_TIM_IC_Start+0x13e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d104      	bne.n	8003212 <HAL_TIM_IC_Start+0x126>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003210:	e00b      	b.n	800322a <HAL_TIM_IC_Start+0x13e>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d104      	bne.n	8003222 <HAL_TIM_IC_Start+0x136>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003220:	e003      	b.n	800322a <HAL_TIM_IC_Start+0x13e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2201      	movs	r2, #1
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 f940 	bl	80044b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_TIM_IC_Start+0x1b4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_TIM_IC_Start+0x16a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d004      	beq.n	8003256 <HAL_TIM_IC_Start+0x16a>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <HAL_TIM_IC_Start+0x1b8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d115      	bne.n	8003282 <HAL_TIM_IC_Start+0x196>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_TIM_IC_Start+0x1bc>)
 800325e:	4013      	ands	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d015      	beq.n	8003294 <HAL_TIM_IC_Start+0x1a8>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326e:	d011      	beq.n	8003294 <HAL_TIM_IC_Start+0x1a8>
    {
      __HAL_TIM_ENABLE(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003280:	e008      	b.n	8003294 <HAL_TIM_IC_Start+0x1a8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e000      	b.n	8003296 <HAL_TIM_IC_Start+0x1aa>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40014000 	.word	0x40014000
 80032a8:	00010007 	.word	0x00010007

080032ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_TIM_IC_Start_IT+0x1e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	e023      	b.n	8003312 <HAL_TIM_IC_Start_IT+0x66>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d104      	bne.n	80032da <HAL_TIM_IC_Start_IT+0x2e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	e01b      	b.n	8003312 <HAL_TIM_IC_Start_IT+0x66>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d104      	bne.n	80032ea <HAL_TIM_IC_Start_IT+0x3e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e013      	b.n	8003312 <HAL_TIM_IC_Start_IT+0x66>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_IC_Start_IT+0x4e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e00b      	b.n	8003312 <HAL_TIM_IC_Start_IT+0x66>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_IT+0x5e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e003      	b.n	8003312 <HAL_TIM_IC_Start_IT+0x66>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003310:	b2db      	uxtb	r3, r3
 8003312:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d104      	bne.n	8003324 <HAL_TIM_IC_Start_IT+0x78>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e013      	b.n	800334c <HAL_TIM_IC_Start_IT+0xa0>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b04      	cmp	r3, #4
 8003328:	d104      	bne.n	8003334 <HAL_TIM_IC_Start_IT+0x88>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e00b      	b.n	800334c <HAL_TIM_IC_Start_IT+0xa0>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d104      	bne.n	8003344 <HAL_TIM_IC_Start_IT+0x98>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e003      	b.n	800334c <HAL_TIM_IC_Start_IT+0xa0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800334a:	b2db      	uxtb	r3, r3
 800334c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800334e:	7bbb      	ldrb	r3, [r7, #14]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003354:	7b7b      	ldrb	r3, [r7, #13]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d001      	beq.n	800335e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e0c9      	b.n	80034f2 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <HAL_TIM_IC_Start_IT+0xc2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	e023      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x10a>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d104      	bne.n	800337e <HAL_TIM_IC_Start_IT+0xd2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800337c:	e01b      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x10a>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d104      	bne.n	800338e <HAL_TIM_IC_Start_IT+0xe2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	e013      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x10a>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d104      	bne.n	800339e <HAL_TIM_IC_Start_IT+0xf2>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800339c:	e00b      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x10a>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d104      	bne.n	80033ae <HAL_TIM_IC_Start_IT+0x102>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ac:	e003      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x10a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_TIM_IC_Start_IT+0x11a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033c4:	e013      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x142>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_IC_Start_IT+0x12a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d4:	e00b      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x142>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_IC_Start_IT+0x13a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033e4:	e003      	b.n	80033ee <HAL_TIM_IC_Start_IT+0x142>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d841      	bhi.n	8003478 <HAL_TIM_IC_Start_IT+0x1cc>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <HAL_TIM_IC_Start_IT+0x150>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003431 	.word	0x08003431
 8003400:	08003479 	.word	0x08003479
 8003404:	08003479 	.word	0x08003479
 8003408:	08003479 	.word	0x08003479
 800340c:	08003443 	.word	0x08003443
 8003410:	08003479 	.word	0x08003479
 8003414:	08003479 	.word	0x08003479
 8003418:	08003479 	.word	0x08003479
 800341c:	08003455 	.word	0x08003455
 8003420:	08003479 	.word	0x08003479
 8003424:	08003479 	.word	0x08003479
 8003428:	08003479 	.word	0x08003479
 800342c:	08003467 	.word	0x08003467
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f042 0202 	orr.w	r2, r2, #2
 800343e:	60da      	str	r2, [r3, #12]
      break;
 8003440:	e01d      	b.n	800347e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0204 	orr.w	r2, r2, #4
 8003450:	60da      	str	r2, [r3, #12]
      break;
 8003452:	e014      	b.n	800347e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0208 	orr.w	r2, r2, #8
 8003462:	60da      	str	r2, [r3, #12]
      break;
 8003464:	e00b      	b.n	800347e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0210 	orr.w	r2, r2, #16
 8003474:	60da      	str	r2, [r3, #12]
      break;
 8003476:	e002      	b.n	800347e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	bf00      	nop
  }

  if (status == HAL_OK)
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d135      	bne.n	80034f0 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2201      	movs	r2, #1
 800348a:	6839      	ldr	r1, [r7, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f001 f813 	bl	80044b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a19      	ldr	r2, [pc, #100]	; (80034fc <HAL_TIM_IC_Start_IT+0x250>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_TIM_IC_Start_IT+0x204>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_IC_Start_IT+0x204>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <HAL_TIM_IC_Start_IT+0x254>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d115      	bne.n	80034dc <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <HAL_TIM_IC_Start_IT+0x258>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d015      	beq.n	80034ee <HAL_TIM_IC_Start_IT+0x242>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c8:	d011      	beq.n	80034ee <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	e008      	b.n	80034ee <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40014000 	.word	0x40014000
 8003504:	00010007 	.word	0x00010007

08003508 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003514:	2300      	movs	r3, #0
 8003516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003522:	2302      	movs	r3, #2
 8003524:	e088      	b.n	8003638 <HAL_TIM_IC_ConfigChannel+0x130>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11b      	bne.n	800356c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f000 fe12 	bl	800416c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 020c 	bic.w	r2, r2, #12
 8003556:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	619a      	str	r2, [r3, #24]
 800356a:	e060      	b.n	800362e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b04      	cmp	r3, #4
 8003570:	d11c      	bne.n	80035ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6819      	ldr	r1, [r3, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f000 fe78 	bl	8004276 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699a      	ldr	r2, [r3, #24]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003594:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6999      	ldr	r1, [r3, #24]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	021a      	lsls	r2, r3, #8
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
 80035aa:	e040      	b.n	800362e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d11b      	bne.n	80035ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f000 fec5 	bl	8004350 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 020c 	bic.w	r2, r2, #12
 80035d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69d9      	ldr	r1, [r3, #28]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	61da      	str	r2, [r3, #28]
 80035e8:	e021      	b.n	800362e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d11c      	bne.n	800362a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f000 fee2 	bl	80043c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69da      	ldr	r2, [r3, #28]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003612:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69d9      	ldr	r1, [r3, #28]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	61da      	str	r2, [r3, #28]
 8003628:	e001      	b.n	800362e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003636:	7dfb      	ldrb	r3, [r7, #23]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800365a:	2302      	movs	r3, #2
 800365c:	e0ff      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b14      	cmp	r3, #20
 800366a:	f200 80f0 	bhi.w	800384e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800366e:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003674:	080036c9 	.word	0x080036c9
 8003678:	0800384f 	.word	0x0800384f
 800367c:	0800384f 	.word	0x0800384f
 8003680:	0800384f 	.word	0x0800384f
 8003684:	08003709 	.word	0x08003709
 8003688:	0800384f 	.word	0x0800384f
 800368c:	0800384f 	.word	0x0800384f
 8003690:	0800384f 	.word	0x0800384f
 8003694:	0800374b 	.word	0x0800374b
 8003698:	0800384f 	.word	0x0800384f
 800369c:	0800384f 	.word	0x0800384f
 80036a0:	0800384f 	.word	0x0800384f
 80036a4:	0800378b 	.word	0x0800378b
 80036a8:	0800384f 	.word	0x0800384f
 80036ac:	0800384f 	.word	0x0800384f
 80036b0:	0800384f 	.word	0x0800384f
 80036b4:	080037cd 	.word	0x080037cd
 80036b8:	0800384f 	.word	0x0800384f
 80036bc:	0800384f 	.word	0x0800384f
 80036c0:	0800384f 	.word	0x0800384f
 80036c4:	0800380d 	.word	0x0800380d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fa3a 	bl	8003b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	619a      	str	r2, [r3, #24]
      break;
 8003706:	e0a5      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa96 	bl	8003c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699a      	ldr	r2, [r3, #24]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6999      	ldr	r1, [r3, #24]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	021a      	lsls	r2, r3, #8
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]
      break;
 8003748:	e084      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	4618      	mov	r0, r3
 8003752:	f000 faef 	bl	8003d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0208 	orr.w	r2, r2, #8
 8003764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0204 	bic.w	r2, r2, #4
 8003774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69d9      	ldr	r1, [r3, #28]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	61da      	str	r2, [r3, #28]
      break;
 8003788:	e064      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fb47 	bl	8003e24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69d9      	ldr	r1, [r3, #28]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	021a      	lsls	r2, r3, #8
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	61da      	str	r2, [r3, #28]
      break;
 80037ca:	e043      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fb84 	bl	8003ee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0208 	orr.w	r2, r2, #8
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800380a:	e023      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fbbc 	bl	8003f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	021a      	lsls	r2, r3, #8
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800384c:	e002      	b.n	8003854 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
      break;
 8003852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop

08003868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_TIM_ConfigClockSource+0x1c>
 8003880:	2302      	movs	r3, #2
 8003882:	e0b6      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x18a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c0:	d03e      	beq.n	8003940 <HAL_TIM_ConfigClockSource+0xd8>
 80038c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c6:	f200 8087 	bhi.w	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	f000 8086 	beq.w	80039de <HAL_TIM_ConfigClockSource+0x176>
 80038d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d6:	d87f      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 80038d8:	2b70      	cmp	r3, #112	; 0x70
 80038da:	d01a      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0xaa>
 80038dc:	2b70      	cmp	r3, #112	; 0x70
 80038de:	d87b      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 80038e0:	2b60      	cmp	r3, #96	; 0x60
 80038e2:	d050      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x11e>
 80038e4:	2b60      	cmp	r3, #96	; 0x60
 80038e6:	d877      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 80038e8:	2b50      	cmp	r3, #80	; 0x50
 80038ea:	d03c      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0xfe>
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d873      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d058      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x13e>
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d86f      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 80038f8:	2b30      	cmp	r3, #48	; 0x30
 80038fa:	d064      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15e>
 80038fc:	2b30      	cmp	r3, #48	; 0x30
 80038fe:	d86b      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 8003900:	2b20      	cmp	r3, #32
 8003902:	d060      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15e>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d867      	bhi.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d05c      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15e>
 800390c:	2b10      	cmp	r3, #16
 800390e:	d05a      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0x15e>
 8003910:	e062      	b.n	80039d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f000 fda9 	bl	8004478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	609a      	str	r2, [r3, #8]
      break;
 800393e:	e04f      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f000 fd92 	bl	8004478 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003962:	609a      	str	r2, [r3, #8]
      break;
 8003964:	e03c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	461a      	mov	r2, r3
 8003974:	f000 fc50 	bl	8004218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2150      	movs	r1, #80	; 0x50
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fd5f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 8003984:	e02c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	461a      	mov	r2, r3
 8003994:	f000 fcac 	bl	80042f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2160      	movs	r1, #96	; 0x60
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fd4f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 80039a4:	e01c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	461a      	mov	r2, r3
 80039b4:	f000 fc30 	bl	8004218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2140      	movs	r1, #64	; 0x40
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fd3f 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 80039c4:	e00c      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f000 fd36 	bl	8004442 <TIM_ITRx_SetConfig>
      break;
 80039d6:	e003      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
      break;
 80039dc:	e000      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e031      	b.n	8003a76 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a22:	6839      	ldr	r1, [r7, #0]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb0d 	bl	8004044 <TIM_SlaveTimer_SetConfig>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e018      	b.n	8003a76 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a52:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a62:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <TIM_Base_SetConfig+0xbc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0x20>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d108      	bne.n	8003ab2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a21      	ldr	r2, [pc, #132]	; (8003b3c <TIM_Base_SetConfig+0xbc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0x52>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0x52>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a1e      	ldr	r2, [pc, #120]	; (8003b40 <TIM_Base_SetConfig+0xc0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0x52>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <TIM_Base_SetConfig+0xc4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <TIM_Base_SetConfig+0xbc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0xa0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a0b      	ldr	r2, [pc, #44]	; (8003b40 <TIM_Base_SetConfig+0xc0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0xa0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <TIM_Base_SetConfig+0xc4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d103      	bne.n	8003b28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	615a      	str	r2, [r3, #20]
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400

08003b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f023 0302 	bic.w	r3, r3, #2
 8003b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <TIM_OC1_SetConfig+0xec>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_OC1_SetConfig+0x70>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <TIM_OC1_SetConfig+0xf0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_OC1_SetConfig+0x70>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <TIM_OC1_SetConfig+0xf4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d10c      	bne.n	8003bd2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 0308 	bic.w	r3, r3, #8
 8003bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <TIM_OC1_SetConfig+0xec>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <TIM_OC1_SetConfig+0xa2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <TIM_OC1_SetConfig+0xf0>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <TIM_OC1_SetConfig+0xa2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a15      	ldr	r2, [pc, #84]	; (8003c3c <TIM_OC1_SetConfig+0xf4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d111      	bne.n	8003c0e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400

08003c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0210 	bic.w	r2, r3, #16
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 0320 	bic.w	r3, r3, #32
 8003c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <TIM_OC2_SetConfig+0xe8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d10d      	bne.n	8003cc0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a19      	ldr	r2, [pc, #100]	; (8003d28 <TIM_OC2_SetConfig+0xe8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d007      	beq.n	8003cd8 <TIM_OC2_SetConfig+0x98>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a18      	ldr	r2, [pc, #96]	; (8003d2c <TIM_OC2_SetConfig+0xec>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <TIM_OC2_SetConfig+0x98>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <TIM_OC2_SetConfig+0xf0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d113      	bne.n	8003d00 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40012c00 	.word	0x40012c00
 8003d2c:	40014000 	.word	0x40014000
 8003d30:	40014400 	.word	0x40014400

08003d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10d      	bne.n	8003db2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <TIM_OC3_SetConfig+0x96>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <TIM_OC3_SetConfig+0xe8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_OC3_SetConfig+0x96>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <TIM_OC3_SetConfig+0xec>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d113      	bne.n	8003df2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	621a      	str	r2, [r3, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40012c00 	.word	0x40012c00
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400

08003e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <TIM_OC4_SetConfig+0xb0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_OC4_SetConfig+0x74>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <TIM_OC4_SetConfig+0xb4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC4_SetConfig+0x74>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <TIM_OC4_SetConfig+0xb8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d109      	bne.n	8003eac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400

08003ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <TIM_OC5_SetConfig+0xa4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_OC5_SetConfig+0x6a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <TIM_OC5_SetConfig+0xa8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_OC5_SetConfig+0x6a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <TIM_OC5_SetConfig+0xac>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d109      	bne.n	8003f5e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400

08003f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	051b      	lsls	r3, r3, #20
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a14      	ldr	r2, [pc, #80]	; (8004038 <TIM_OC6_SetConfig+0xa8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_OC6_SetConfig+0x6c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <TIM_OC6_SetConfig+0xac>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_OC6_SetConfig+0x6c>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a12      	ldr	r2, [pc, #72]	; (8004040 <TIM_OC6_SetConfig+0xb0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d109      	bne.n	8004010 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	029b      	lsls	r3, r3, #10
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	621a      	str	r2, [r3, #32]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400

08004044 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b70      	cmp	r3, #112	; 0x70
 8004090:	d01a      	beq.n	80040c8 <TIM_SlaveTimer_SetConfig+0x84>
 8004092:	2b70      	cmp	r3, #112	; 0x70
 8004094:	d860      	bhi.n	8004158 <TIM_SlaveTimer_SetConfig+0x114>
 8004096:	2b60      	cmp	r3, #96	; 0x60
 8004098:	d054      	beq.n	8004144 <TIM_SlaveTimer_SetConfig+0x100>
 800409a:	2b60      	cmp	r3, #96	; 0x60
 800409c:	d85c      	bhi.n	8004158 <TIM_SlaveTimer_SetConfig+0x114>
 800409e:	2b50      	cmp	r3, #80	; 0x50
 80040a0:	d046      	beq.n	8004130 <TIM_SlaveTimer_SetConfig+0xec>
 80040a2:	2b50      	cmp	r3, #80	; 0x50
 80040a4:	d858      	bhi.n	8004158 <TIM_SlaveTimer_SetConfig+0x114>
 80040a6:	2b40      	cmp	r3, #64	; 0x40
 80040a8:	d019      	beq.n	80040de <TIM_SlaveTimer_SetConfig+0x9a>
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d854      	bhi.n	8004158 <TIM_SlaveTimer_SetConfig+0x114>
 80040ae:	2b30      	cmp	r3, #48	; 0x30
 80040b0:	d055      	beq.n	800415e <TIM_SlaveTimer_SetConfig+0x11a>
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d850      	bhi.n	8004158 <TIM_SlaveTimer_SetConfig+0x114>
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d051      	beq.n	800415e <TIM_SlaveTimer_SetConfig+0x11a>
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d84c      	bhi.n	8004158 <TIM_SlaveTimer_SetConfig+0x114>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04d      	beq.n	800415e <TIM_SlaveTimer_SetConfig+0x11a>
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d04b      	beq.n	800415e <TIM_SlaveTimer_SetConfig+0x11a>
 80040c6:	e047      	b.n	8004158 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68d9      	ldr	r1, [r3, #12]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f000 f9ce 	bl	8004478 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80040dc:	e040      	b.n	8004160 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d101      	bne.n	80040ea <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e03b      	b.n	8004162 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004110:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	4313      	orrs	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
      break;
 800412e:	e017      	b.n	8004160 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	461a      	mov	r2, r3
 800413e:	f000 f86b 	bl	8004218 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004142:	e00d      	b.n	8004160 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6899      	ldr	r1, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	461a      	mov	r2, r3
 8004152:	f000 f8cd 	bl	80042f0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004156:	e003      	b.n	8004160 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
      break;
 800415c:	e000      	b.n	8004160 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800415e:	bf00      	nop
  }

  return status;
 8004160:	7dfb      	ldrb	r3, [r7, #23]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <TIM_TI1_SetConfig+0xa4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <TIM_TI1_SetConfig+0x3e>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d003      	beq.n	80041aa <TIM_TI1_SetConfig+0x3e>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <TIM_TI1_SetConfig+0xa8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <TIM_TI1_SetConfig+0x42>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <TIM_TI1_SetConfig+0x44>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0303 	bic.w	r3, r3, #3
 80041ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e003      	b.n	80041ce <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f023 030a 	bic.w	r3, r3, #10
 80041e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 030a 	and.w	r3, r3, #10
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40012c00 	.word	0x40012c00
 8004214:	40014000 	.word	0x40014000

08004218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 030a 	bic.w	r3, r3, #10
 8004254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f023 0210 	bic.w	r2, r3, #16
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 0210 	bic.w	r2, r3, #16
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800431a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	031b      	lsls	r3, r3, #12
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800432c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0303 	bic.w	r3, r3, #3
 800437c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800438c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	b2db      	uxtb	r3, r3
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80043a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	621a      	str	r2, [r3, #32]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004406:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	031b      	lsls	r3, r3, #12
 800440c:	b29b      	uxth	r3, r3
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800441a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	031b      	lsls	r3, r3, #12
 8004420:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	f043 0307 	orr.w	r3, r3, #7
 8004464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	609a      	str	r2, [r3, #8]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	431a      	orrs	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4313      	orrs	r3, r2
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	609a      	str	r2, [r3, #8]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2201      	movs	r2, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	43db      	mvns	r3, r3
 80044da:	401a      	ands	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
	...

08004504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004518:	2302      	movs	r3, #2
 800451a:	e04f      	b.n	80045bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a21      	ldr	r2, [pc, #132]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d108      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800454c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004584:	d004      	beq.n	8004590 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a10      	ldr	r2, [pc, #64]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d10c      	bne.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	40012c00 	.word	0x40012c00
 80045cc:	40014000 	.word	0x40014000

080045d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e060      	b.n	80046ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a14      	ldr	r2, [pc, #80]	; (80046bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d115      	bne.n	800469c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	051b      	lsls	r3, r3, #20
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40012c00 	.word	0x40012c00

080046c0 <__libc_init_array>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4d0d      	ldr	r5, [pc, #52]	; (80046f8 <__libc_init_array+0x38>)
 80046c4:	4c0d      	ldr	r4, [pc, #52]	; (80046fc <__libc_init_array+0x3c>)
 80046c6:	1b64      	subs	r4, r4, r5
 80046c8:	10a4      	asrs	r4, r4, #2
 80046ca:	2600      	movs	r6, #0
 80046cc:	42a6      	cmp	r6, r4
 80046ce:	d109      	bne.n	80046e4 <__libc_init_array+0x24>
 80046d0:	4d0b      	ldr	r5, [pc, #44]	; (8004700 <__libc_init_array+0x40>)
 80046d2:	4c0c      	ldr	r4, [pc, #48]	; (8004704 <__libc_init_array+0x44>)
 80046d4:	f000 f820 	bl	8004718 <_init>
 80046d8:	1b64      	subs	r4, r4, r5
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	2600      	movs	r6, #0
 80046de:	42a6      	cmp	r6, r4
 80046e0:	d105      	bne.n	80046ee <__libc_init_array+0x2e>
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e8:	4798      	blx	r3
 80046ea:	3601      	adds	r6, #1
 80046ec:	e7ee      	b.n	80046cc <__libc_init_array+0xc>
 80046ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f2:	4798      	blx	r3
 80046f4:	3601      	adds	r6, #1
 80046f6:	e7f2      	b.n	80046de <__libc_init_array+0x1e>
 80046f8:	08004770 	.word	0x08004770
 80046fc:	08004770 	.word	0x08004770
 8004700:	08004770 	.word	0x08004770
 8004704:	08004774 	.word	0x08004774

08004708 <memset>:
 8004708:	4402      	add	r2, r0
 800470a:	4603      	mov	r3, r0
 800470c:	4293      	cmp	r3, r2
 800470e:	d100      	bne.n	8004712 <memset+0xa>
 8004710:	4770      	bx	lr
 8004712:	f803 1b01 	strb.w	r1, [r3], #1
 8004716:	e7f9      	b.n	800470c <memset+0x4>

08004718 <_init>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr

08004724 <_fini>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr
